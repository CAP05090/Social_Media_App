const bcrypt = require("bcrypt")
const dotenv = require("dotenv").config()
const jwt = require("jsonwebtoken")
const { UserModel } = require("../models/userModel")
const { BlackListModel } = require("../models/BlackListTokenModel")

const userRouter = require("express").Router()

//YAML
/**
 * @swagger
 * components:
 *  schemas:
 *      User:
 *          type: object
 *          properties:
 *            id:
 *              type: string
 *              description: The Unique Id generated by mongoDB.
 *            name:
 *              type: string
 *              description: The name of the user.
 *            email:
 *              type: string
 *              description: The email address of the user.
 *            gender:
 *              type: string
 *              description: The gender of the user.
 *            password:
 *              type: string
 *              description: The hashed password of the user.
 */

/**
 * @swagger
 * tags:
 *  name: Users
 *  description: All the API routes to users.
 */

// Register the Users

/**
 * @swagger
 *  /users/register:
 *    post:
 *      summary: Register a new user
 *      tags: [Users]
 *      requestBody: 
 *          required: true
 *          content:
 *              application/json:
 *                  schema:
 *                      $ref: "#/components/schemas/User"
 *                  example: 
 *                      - id: 1
 *                        name: "Abc"
 *                        email: "a@gmail.com"
 *                        gender: "Male/Female"
 *                        password: "abcd@1234"
 *      responses:
 *          '200': 
 *              description: The user has been registered successfully.
 *              constent:
 *                  application/json:
 *                      example:
 *                          msg: Users Registered Successfully
 *          '400':
 *              description: Bad request or error during registration
 *              constent:
 *                  application/json:
 *                      example:
 *                          msg: Error message indicating the issue.
 *                          Error: More details about the error.
 */

userRouter.post("/register", async(req, res)=>{
    const {name, email, gender, password} = req.body
    try {
        let mail = await UserModel.findOne({email})
        if(mail){
            res.send({"msg":"Email is already registered"})
        } else {
            if(isStrongPassword(password)){
                bcrypt.hash(password, 5, async(err, hash)=>{
                    if(err){
                        res.status(400).send({"msg":"Error During Hashing password"})
                    } else{
                        let user = new UserModel({name, password: hash, email, gender})
                        await user.save()
                        res.status(200).send("Users Registered Successfully")
                    }
                })
            } else {
                res.send({"msg":"Password does not meet the criteria"})
            }
        }
    } catch (error) {
        res.status(400).send({"Error":error.message})
    }
})

// Login the Users
/**
 * @swagger
 * /users/login:
 *  post:
 *      summary: Login a new user
 *      tags: [Users]
 *      requestBody:
 *          required: true
 *          content:
 *              application/json:
 *                  schema:
 *                      type: object
 *                      properties:
 *                          email:
 *                              type: string
 *                              description: Users Email
 *                          password:
 *                              type: string
 *                              description: Users Password
 *      responses:
 *          '200':
 *              description: The user haas been Login successfully.
 *              schema: 
 *                  type: object
 *                  properties:
 *                      msg:
 *                          type: string
 *                          example: Login Successfully
 *                      AccessToken:
 *                          type: string
 *                          example: "eyJhbGciOiJIUzI1NiIsIn..."
 *                      RefreshToken:
 *                          type: string
 *                          example: "eyJhbGciOiJIUzI1NiIsIn..."
 *          '400':
 *              description: Something went wrong.
 */

userRouter.post("/login", async(req, res)=>{
    const {email, password} = req.body
    try {
        let user = await UserModel.findOne({email})
        if(user){
            bcrypt.compare(password, user.password, function(err, result) {
                if(err){
                    res.status(200).send({"msg":"Password not matched"})
                } else{
                    const Atoken = jwt.sign({userId:user._id, user:user.email}, process.env.AccessKey)
                    const Rtoken = jwt.sign({userId:user._id, mail:user.email}, process.env.RefreshKey)
                    res.status(200).send({"msg":"Login Successfully", "AccessToken":Atoken, "RefreshToken":Rtoken})
                }
            });
        } else{
            res.status(200).send({"msg":"Email not found"})
        }
    } catch (error) {
        res.status(400).send({"Err":error.message})
    }
})

// Refresh to get new access token
/**
 * @swagger
 * /users/refresh:
 *  get:
 *      summary: Refresh the page and get a new access token.
 *      tags: [Users]
 *      parameters:
 *          - in: header
 *            name: authorization
 *            schema: 
 *               type: string
 *            required: true
 *            description: Refresh token generated during Login.
 *      responses:
 *          '200':
 *              description: Get a new Access Token.
 *              content: 
 *                  application/json:
 *                      example: 
 *                          AccessToken: "eyJhbGciOiJIUzI1NiIsIn..."
 *          '400':
 *              description: Token Expires
 *          '401':
 *              description: Unauthorized Users
 */

userRouter.get("/refresh", (req, res)=>{
    const Rtoken = req.headers.authorization?.split(" ")[1]
    if (Rtoken){
        jwt.verify(Rtoken, process.env.RefreshKey, (err, decodec)=>{
            if(err){
                res.status(200).send({"msg":"Token Expires"})
            } else{
                const Atoken = jwt.sign({userId: "user._id"}, process.env.AccessKey)
                res.status(400).send({"AccessToken": Atoken})
            }
        })
    } else{
        res.status(401).send({"msg":"Unauthorised User"})
    }
})

// Logout the Users
/**
 * @swagger
 *  /users/logout:
 *      get:
 *          summary: Logout the user
 *          tags: [Users]
 *          parameters:
 *              - in: header
 *                name: authorization
 *                schema: 
 *                    type: string
 *                required: true
 *                description: Access token to be invalidated.
 *          responses:
 *              '200':
 *                  description: User Logout Successfully.
 *              '400':
 *                  description: Some thing went wrong.
 */

userRouter.get("/logout", async(req, res)=>{
    const token = req.headers.authorization?.split(" ")[1]
    try {
        const tokens = new BlackListModel({token: token, date: new Date()})
        await tokens.save()
        res.send({"msg":"User logout Successfully"})
    } catch (error) {
        res.send({"Error":error.message})
    }
})

module.exports = {userRouter}

// Check Password is Strong or not
const isStrongPassword = (password)=>{
    const Lreg = /[a-z]/
    const Ureg = /[A-Z]/
    const Dreg = /\d/
    const Sreg = /[!@#$%&*?_]/
    const Checklen = password.length >= 8

    const isStrong = 
        Lreg.test(password) &&
        Ureg.test(password) &&
        Dreg.test(password) &&
        Sreg.test(password) &&
        Checklen
    return isStrong;
}