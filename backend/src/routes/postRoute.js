const {PostModel} = require("../models/postModel")
const {auth} = require("../middlewares/auth.middleware")
const postRouter = require("express").Router()


//YAML
/**
 * @swagger
 *  components:
 *      schemas:
 *          Post:
 *              type: object
 *              properties:
 *                id: 
 *                  type: string
 *                  description: Unique Id generated by MongoDB.
 *                userId: 
 *                  type: string
 *                  description: Unique Id of the user.
 *                title: 
 *                  type: string
 *                  description: Title of the post.
 *                body: 
 *                  type: string
 *                  description: Description of the post
 *                device: 
 *                  type: string
 *                  description: Device by which post created.
 */

/**
 * @swagger
 *  tags:
 *      name: Posts
 *      description: All the API routes to Posts.
 */
// Get Posts Data
/**
 * @swagger
 *  /posts:
 *      get:
 *          summary: Get all the Posts.
 *          tags: [Posts]
 *          async: true
 *          security:
 *              - BearerAuth: []
 *          responses:
 *              '200':
 *                  description: The list of all Posts.
 *                  content:
 *                      application/json:
 *                          schema:
 *                              $ref: "#/components/schemas/Post"
 *                          example:
 *                              Posts: 
 *                                  - id: "1"
 *                                    title: ""
 *                                    body: ""
 *                                    device: "MOBILE/TABLET/PC"
 *              '500':
 *                  description: Internal Server Error
 *                  content:
 *                      application/json:
 *                          example:
 *                              error: "Error message indicating the issue"
 */

postRouter.get("/", auth, async(req, res)=>{
    try {
        const post = await PostModel.find()
        res.status(200).send({"Posts": post})
    } catch (error) {
        res.status(500).send({"error":error.message})
    }
})

// Add Posts Data
/**
 * @swagger
 *  /posts/add:
 *      post:
 *          summary: Added a new post to DB.
 *          tags: [Posts]
 *          async: true
 *          security:
 *              - BearerAuth: []
 *          requestBody:
 *              required: true
 *              content:
 *                  application/json:
 *                      schema: 
 *                          $ref: "#/components/schemas/Post"
 *          responses:
 *              '200':
 *                  description: The new post hasbeen Added.
 *              '400':
 *                  description: Bad request or Something Wrong.
 */
postRouter.post("/add", auth, async(req, res)=>{
    const userId = req.userId
    const {title, body, device} = req.body
    try {
         const post = new PostModel({userId, title, body, device})
        await post.save()
        console.log(post)
         res.send({"msg":"New post added to Databse"})
    } catch (error) {
        res.send({"erroe": error.message})
    }
})

// Update Posts Data
/**
 * @swagger
 *  /posts/update/{id}:
 *      patch: 
 *          summary: Update the details of the specific post.
 *          tags: [Posts]
 *          async: true
 *          security:
 *              - BearerAuth: []
 *          parameters:
 *              - in: path
 *                name: id
 *                schema:
 *                  type: string
 *                required: true
 *                description: Unique id of a particular Post.
 *          requestBody:
 *              required: true
 *              content:
 *                  application/json:
 *                      schema:
 *                          $ref: "#/components/schemas/Post"
 *          responses:
 *              '200':
 *                  description: Post has been updated successfully.
 *                  content:
 *                      application/json:
 *                          example:
 *                              msg: "Post has been updated successfully"
 *              '400':
 *                  description: Bad request or something went wrong.
 *                  content:
 *                      application/json:
 *                          example:
 *                              msg: Error message indicating the issue
 */

postRouter.patch("/update/:id", auth, async(req, res)=>{
    const {id} = req.params
    try {
        await PostModel.findByIdAndUpdate({_id: id}, req.body)
        res.send({"msg":`post id ${id} has been updated `})
    } catch (error) {
        res.send({"msg":error.message})
    }
})

// Delete Posts Data
/**
 * @swagger
 *  /posts/delete/{id}:
 *      delete: 
 *          summary: delete a specific Post.
 *          tags: [Posts]
 *          async: true
 *          security:
 *              - BearerAuth: []
 *          parameters:
 *              - in: path
 *                name: id
 *                schema:
 *                  type: string
 *                required: true
 *                description: Unique id of a particular Post.
 *          responses:
 *              '200':
 *                  description: Post has been deleted successfully.
 *                  content:
 *                      application/json:
 *                          example:
 *                              msg: "Post has been deleted successfully"
 *              '400':
 *                  description: Bad request or something went wrong.
 *                  content:
 *                      application/json:
 *                          example:
 *                              msg: Error message indicating the issue
 */

postRouter.delete("/delete/:id", auth, async(req, res)=>{
    const {id} = req.params
    try {
        await PostModel.findByIdAndDelete({_id:id})
        res.send({"msg":`post id ${id} has been deleted `})
    } catch (error) {
        res.send({"msg":error.message})
    }
})

module.exports = {postRouter}
